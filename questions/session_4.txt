1. What Is The Output Of The Following Code Snippet?

num = 1

def func():
    global num
    num = num + 3
    print(num)

func()
print(num)


2. What Is The Output Of The Following Code Snippet?
    raise_to_power = lambda num, power: num ** power


3. What Is The Output Of The Following Code Snippet?

myList = [
    lambda x: x ** 2,
    lambda x: x ** 3,
    lambda x: x ** 4
]

for f in myList:
   print(f(3))

The default value is evaluated only once. This makes a difference when the default is a mutable object such as a list, dictionary, or instances of most classes. For example, the following function accumulates the arguments passed to it on subsequent calls:


def f(a, L=[]):
    L.append(a)
    return L


print(f(1))
print(f(2))
print(f(3))


def f(a, L=[]):
    L.append(a)
    return L


def f(a, L=None):
    if L is None:
        L = []
    L.append(a)
    return L



    >>> for f in dir('__builtins__'):
    ...     print(f)
    ...
    __add__
    __class__
    __contains__
    __delattr__
    __dir__
    __doc__
    __eq__
    __format__
    __ge__
    __getattribute__
    __getitem__
    __getnewargs__
    __gt__
    __hash__
    __init__
    __iter__
    __le__
    __len__
    __lt__
    __mod__
    __mul__
    __ne__
    __new__
    __reduce__
    __reduce_ex__
    __repr__
    __rmod__
    __rmul__
    __setattr__
    __sizeof__
    __str__
    __subclasshook__
    capitalize
    casefold
    center
    count
    encode
    endswith
    expandtabs
    find
    format
    format_map
    index
    isalnum
    isalpha
    isdecimal
    isdigit
    isidentifier
    islower
    isnumeric
    isprintable
    isspace
    istitle
    isupper
    join
    ljust
    lower
    lstrip
    maketrans
    partition
    replace
    rfind
    rindex
    rjust
    rpartition
    rsplit
    rstrip
    split
    splitlines
    startswith
    strip
    swapcase
    title
    translate
    upper
    zfill
    >>> 'a'.isalpha()
    True
    >>> 'a1'.isalpha()
    False
    >>> 'a1'.isalnum()
    True
    >>> '5'.isalnum()
    True
    >>> 'j'.isalnum()
    True
    >>> 'j'.isdigit()
    False
    >>> '5'.isdigit()
    True
