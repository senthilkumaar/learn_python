
Summary:
  1. Lambda function:
    a. callback functions
    b. lambda function
    c. sorting a dictionary by value

  2. Generators
    a. Difference between Iteration and iterables
    b. What are generators?
    c. Examples
      - Simple Example with single yield statement
      - Functional example without loops
      - Functional example with loops

1. Lambda functions
  Questions:
    1. Write a lambda function that doubles and returns any number (data-type) passed to it
    2. How will you sort a dictionary by its value in reverse order? (and return as list of tuples)
    3. What is a callback function refer to?

  1.a.  Callback functions
    - In python, functions can be passed as an argument to another function
      just like any other variable would be passed

    - This property of function makes it a first class object, meaning
      its a normal object just like string, list etc.

  1.b. Lambda Functions
     - Lambda functions can be used wherever function objects are required
     - They are restricted to a single expression

     - Syntax:
         # lambda function with no arguments
         func_obj = lambda : <expression>    # note: there is no return keyword

         # lambda function with three arguments
         func_obj = lambda x ,y, z: <expression>

  1.c. Sorting dictionaries by value
      - To sort a dictionary by value, override the sorte() function's
        'key' parameter to get the second item in a sequence

      - Example: sorted(d.items(). key=lambda x: x[1])

2. Generators

    Questions:
      4. How to create a generator in Python?
      5. Differences between Generator function and a Normal function
      6. When is StopIteration error thrown?
      7. Create a generator function to compute the power of 2 for the given numbers

   2.a Difference between Iteration and iterables
        Iteration:
          - Iteration is the repetition of some kind of process over and over again
          - Example: iteration over a list in a "for" loop

        Iterable:
          - Any object that is iterated over is called iterable
          - Example:
              - list, str, dict, set etc

    2.b. What are generators?
      - They are functions that generates values one at a time from a given sequence
      - A function with a "yield" keyword makes a function as a generator
      - Since they load only one item at a time, they are highly memory efficient
      - You can use the generated values using a for loop or with "next" function
      - It normally contains the "yield" statement within a "for" or "while" loop

      Syntax:
          def <generator name>():
              for item in <iterable>:
                yield <expression>

    2.c. Examples
      2.c.1  Simple Example with single yield statement
      2.c.2  Functional example without loops
      2.c.3. Functional example with loops
