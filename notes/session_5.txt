Summary:
  1. Comprehensions
    a. List Comprehensions
    b. Dictionary Comprehensions
    c. Set comprehension

  2. Lambda Functions
      a. Callback Functions
      b. lambda function definition
      c. Sorting dictionary by value


Comprehensions in Python provide us with a short and concise way to construct
new sequences (such as lists, set, dictionary etc.) using sequences which have
been already defined

    List Comprehensions
    Dictionary Comprehensions
    Set Comprehensions

List comprehension

Usual way:
    new_list = []
    for i in sequence:
        new_list.append(expressions(i))   # 3 * i

Comprehension way:
    new_list = [expression for item in iterable]


# simple example
x = [i for i in range(10)]

# Example: Comprehension to create even squares
new_range  = [i * i for i in range(5) if i % 2 == 0]


# List comprehension with conditionals
      Syntax:
          new_list = [expression for item in iterable if condition]

# Write a list comprehension to create a list of lower case words from a list
list_of_str = ['This', 'is', 'A', 'List', 'OF', 'STrings', 1000]
list_of_lower_str = [word.lower() for word in list_of_str ]  # error
list_of_lower_str = [ word.lower() for word in list_of_str if type(word) is str]


# Task: Create a list from a tuple ('a', 3.14, 'volume', 54, 'sphere', 22/7)
# that should have all numbers multiplied by 5


Dictionary comprehensions
    - Constructing a dictionary using comprehension is similar to list comprehension
    - Syntax:
        {key:value for i in iterable}
        output_dict = {key:value for variable in iterable if condition}


# Example: dict comprehension to create dict with numbers as values
{str(i):i for i in [1,2,3,4,5]}
{'1': 1, '3': 3, '2': 2, '5': 5, '4': 4}

# Write a dict comprehension to create dict with number of times a word appears in a list
# Usual way:

cmd_history = ['ps -ef', 'subprocess', 'fork', 'fork', 'mkdir', 'ps -ef']  # input list
cmd_count = {}  # result dictionary
for cmd in cmd_history:
    cmd_count[cmd] = cmd_history.count(cmd)   # create key with cmd and value with count
# end for
print(cmd_count)

# Using Comprehension:
{cmd: cmd_history.count(cmd) for cmd in cmd_history}


# Set comprehension
input_list = [1, 2, 3, 4, 4, 4, 5, 6, 6, 6, 7, 7]
output_set = set()

# Using loop for constructing output set
for var in input_list:
  if var % 2 == 0:
    output_set.add(var)


print("Output Set using for loop:", output_set)


# Comprehension way
input_list = [1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 7]

set_using_comp = {var for var in input_list if var % 2 == 0}
set_using_comp = {var for var in input_list if var % 2}   # set of odds

print("Output Set using set comprehensions:", set_using_comp)
