2. lambda functions

Questions:
    Write a lambda function that doubles and returns any number (data-type) passed to it
    How will you sort a dictionary by its value? (and return as list of tuples)
    How will you sort a dictionary by its value in reverse order? (and return as list of tuples)

   Lambda Expressions
      - Lambda functions can be used wherever function objects are required
      - They are restricted to a single expression

      Syntax:
          <function name> = lambda x [,y] [,z]: <expression>                # note: there is no return keyword

# Lambda basics
adder = lambda a : a + 10   # one argument
print(adder(5))

mail_id = lambda f_name, l_name, c_name: '{}.{}@{}.com'.format(f_name, l_name, c_name)
print(mail_id('john', 'doe', 'company'))
print(mail_id('swadhikar', 'c', 'cisco'))


# Simple examples
average = lambda l: sum(l) / len(l) # calculate average of numbers in a list
average([10, 10, 10, 10])
average([1, 2, 3, 4])

# Sort dictionary by value
people_count_dict = {
    'hcl': 1000,
    'tcs': 1200,
    'cts': 650,
    'wipro': 700
}

# Normal sorting
sorted(people_count_dict)   # sorts company names in alphabetical order

# To sort by values
# 1. Use sorted() function on dict.items() -> list of tuples [(a, b), (c, d), ...]
# 2. Pass the keyword argument 'key' as the lambda function.
     lambda x: x[1]


sorted(people_count_dict.items(), key=lambda x: x[1])
sorted(people_count_dict.items(), key=lambda x: x[1], reverse=True)

# sorted function demystified
def print_second_item_on_tuple(t):
    print(t[1])

print_second_item_on_tuple( ('1', 'one')  )
# one

second_item = lambda x: x[1]
print(second_item( (0, 1)  ))
# 1

print(second_item( ('x', 'y')  ))
# 'y'

d = {'a': 'apple', 'b': 'ball', 'c': 'cat'}

print(sorted(d.items()))
# [('a', 'apple'), ('b', 'ball'), ('c', 'cat')]

print(sorted(d.items(), key=lambda x: x[1]))
# [('a', 'apple'), ('b', 'ball'), ('c', 'cat')]

print(sorted(d.items(), key=lambda x: x[1], reverse=True))
# [('c', 'cat'), ('b', 'ball'), ('a', 'apple')]
