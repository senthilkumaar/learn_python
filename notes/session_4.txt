Summary:
  1. Functions
      a. Function definition
      b. Functions with default arguments
      c. Functions with
          1. mandatory arguments
          2. *args - variable number of args
          3. **kwargs - keyword arguments
          4. mandatory, *args and **kwargs
      d. Setting docstring
      e. Callback function

  2. Exception Handling
      a. Syntax errors vs Exceptions
      b. Raising an exception
      c. AssertionError
      d. try-except[-else]-finally
      e. Custom Exceptions


1. Functions

Questions:
    1. What Is The Default Return Value For A Function That Does Not Return Any Value Explicitly?
    2. What is the type of *args and **kwargs?
    3. Is python functions pass by value or pass by reference?
    4. How to define a doc string inside a function?

a. How to define a function
    Syntax:
        def <function name> (parameters) :
            <statements>                    # statements must be indented


b. default arguments
    def <function name> (mandatory_arg, default_arg_1=default_val_1, default_arg_2=default_val_2) :
        <statements>                    # statements must be indented


c. functions with mandatory arguments, *args, **kwargs
    Python allows us to define four types of arguments for a function:

    1. Mandatory arguments (or formal arguments)
        - Required aguments to a function
        - Should be the starting arguments when defining functions
        - Syntax:

          def function_name(arg_1, arg_2):
              <statements>
              ...
              return <return_value>   # return statement is optional

          Argument unpacking mechanism:

            >>> i1, *i2 = (10, 20, 30, 40, 50, 60)    # unpacking tuple
            >>> i2
            [20, 30, 40, 50, 60]    # unpacking creates list!
            >>> type(i2)
            <class 'list'>
            >>> i1, *i2 = 10, 20, 30, 40, 50, 60      # unpacking tuple
            >>> i2
            [20, 30, 40, 50, 60]
            >>>
            >>> a, *rem = 1, 2, 3, 4, 5
            >>> rem
            [2, 3, 4, 5]
            >>>
            >>> start, *middle, end = 1, 2, 3, 4, 5
            >>> start
            1
            >>> middle
            [2, 3, 4]
            >>> end
            5

    2. *args: Variable number of arguments
          - A function can be called with an arbitrary number of arguments (0 or more)
          - These arguments will be wrapped up in a tuple
          - Before the variable number of arguments, zero or more normal arguments may occur.

    3. **kwargs: Variable number of keyword arguments (or named arguments) using **kwargs, for example
        - All keyword arguments are stored in a dictionary
        - They can be accessed in a similar fashion how a dictionary is accessed
        - To pass in a keyword argument, the arguments are passed as below

    4. All the above three used in a single function

       Pseudocode:
          def func(mandatory_arg, *args, **kwargs):
              print mandatory_arg     # mandatory_arg
              if args:
                  print args          # args is a tuple of positional arguments,
              if kwargs: # If kwargs is not empty   # kwargs is a dictionary of keyword arguments,
                  print kwargs


    Note:
      - When we define a function arguments, the order should be formal arguments followed by *args and **kwargs
            def test_function(mandatory_arg_1, mandatory_arg_2, ..., *args, **kwargs):
                <statements>
      - Itâ€™s not mandatory to use the names 'args' and kwargs
      - The args variable is of type tuple. We can pass a tuple as a function argument to map with args.
      - The kwargs variable is of type dict

  d. Setting docstring
      - Describes the function in detail
      - Can be used with help() and dir()

      Example:

      def adder(num_1, num_2):
          """
              Function name : adder
              Purpose       : Calculate sum of two numbers
              arguments     : num_1 (integer), num_2 (integer)
              return        : sum_value (integer)
          """
          return num_1 + num_2

      print(adder.__doc__)

2. Exception Handling

    Questions:
        1. How does "assert" statement works? When do you use it?
        2. How to throw exception intentionally?
        3. What is the difference between Syntax Error and Exception?
        4. How do you throw a custom exception?


    a. AssertionError
      - Instead of waiting for a program to crash in between, we can also check for a condition
        using "assert" keyword
      - In addition to conditional check, the "assert" statement raises an "AssertionError" if
        the condition is not met
      - Syntax:
          assert <condition> [, error message]
      - Example
          assert text.startswith('ip address'), 'Text must start with an ip address'   # str.endswith()

    b. Syntax errors vs Exceptions
        - Syntax error occurs when code is syntactically incorrect
        - Exceptions arises when syntactically correct code results in an error
        - Few common exceptions:

            NameError - accessing a variable before defining
            >>> a = 10
            >>>
            >>> if a > 3:pe
            ...    pass

            KeyError - accessing a dict key which dont exist
                >>> d = {}
                >>>
                >>> d['a']
                Traceback (most recent call last):
                  File "<stdin>", line 1, in <module>
                KeyError: 'a'

        How to suppress KeyError?
        dict.get(inexistent_variable) -> returns None

    c. Raising an exception
        - "raise" keyword
        - we can forcefully raise an exception similar to the way that python raises

    d. try-except[-else][-finally]

       Syntax and Usage:
         try:
            # run this code which may throw exception
         except [ExceptionType]:
            # execute this code when an exception occurs
         [else:]      # optional
            # execute this code when exception is not thrown
         [finally:]   # optional
            # perform all clean-ups here

    e. Custom Exceptions


Command line:

>>> for f in dir('__builtins__'):
    ...     print(f)
    ...
    __add__
    __class__
    __contains__
    __delattr__
    __dir__
    __doc__
    __eq__
    __format__
    __ge__
    __getattribute__
    __getitem__
    __getnewargs__
    __gt__
    __hash__
    __init__
    >>> 'a'.isalpha()
    True
    >>> 'a1'.isalpha()
    False
    >>> 'a1'.isalnum()
    True
    >>> '5'.isalnum()
    True
    >>> 'j'.isalnum()
    True
    >>> 'j'.isdigit()
    False
    >>> '5'.isdigit()
    True
