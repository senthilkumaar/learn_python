1. if-else-elif

Syntax:

if boolean:
    <statements>
    <statements>
# end of if block

if cond:
    line 1
  line 2   # IndentationError: unindent does not match any outer indentation level
    ...


2. for statement

Syntax:

for <var> in <iterable>:
    <statement(s)>           print(n)

Indented language:
  Python is indented - meaaning, rather than curly braces, python uses indentation
(usually 4 spaces) to create code blocksin keyword

3. iterables

  - Iterables are datatypes which has sequence of elements
  - strings, numbers and tuples are immutable datatypes
  - List of iterables in python:
      a. String
      b. List
      c. Tuples
      d. Sets
      e. Dictionaries

  - Iterating over string fetches each character of a string
  - Iterating over lists, sets, tuples fetches each element in the list

3.A String

    Question:
    1. How to iterate over a string "Hello world" and print the contents in same line with one space between each character?

3.B List
    - Ordered, changeable, allows duplicates
    - Lists are used to group different objects together
    - It can be defined using a collection of comma-separated items between square brackets

      Examples:
        cubes = [1, 8, 27, 64, 125] # List of squares upto 5 numbers
        l = ['z', 'y', 'x', 'a', 'a', ('a', 'b', 'a', 1)]

    3.B.1 To find the length of the list (or any iterable)
        - len(list)

    Question:
      Mention the two uses of 'in' keyword.

    3.B.2 Search a list (or any iterable - set, dict, string, tuple):
          - Searching a list is done using 'in' keyword

    3.B.3 List slicing

      Questions:
        Using list slicing
            1. How to reverse a list?
            2. How to print the contents of the lists in steps of two?
            3. Remove first two elements in the below list
               names = ['rajesh', 'arjun', 'murugan', 'vivek']
            4. Delete the entire list

      - Like strings lists can be sliced

      - Pattern:
          list[start index: stop index: steps]

          Examples:

          cubes[:3] = [1, 8, 27]
          cubes[:] = [1, 8, 27, 64, 125]
          cubes[::-1] = [125, 64, 27, 8, 1] # Reverse list

    3.B.4 List concatenation

        Questions:
            What is the difference between list's append and extend method?

        - list.append(item)
            - inplace methods
            - The usual way of adding item to a list is by using append method
            - We can add one element to end of the list
                cubes.append(216)

        - list.extend(list of items)
            - inplace methods
            - Grows the list with the given list
                cubes.extend( [6*6*6, 7*7*7] )

        - Like strings concatenation can be done using '+' operator
            cubes = [1, 8, 27, 64, 125] + [216, 343] + [512]

            Note: if not lists, then TypeError will be thrown

    3.B.5 range(n) function: It is used to create a list of numbers in given range

      >>> range(10) # single arg means 0 to 10 - 1

      [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
      >>>
      >>>
      >>> range(5, 10) # two args range of 5 to 10 - 1
      [5, 6, 7, 8, 9]
      >>>
      >>>
      >>> range(5, 20, 2) # 3 args range of 5 to 20 -1 in steps of 2
      [5, 7, 9, 11, 13, 15, 17, 19]
      >>>
      >>>

    3.B.6 Other commonly used methods

        - insert(index, item)
        - remove(item) - removes first occurence
        - clear()
        - sort() - in place sorting
        - reverse() - in place reverse
        - count(item) - Since it allows duplicates
        - index(item) - first index

3.C Tuple
    - Ordered, ***Cannot be changed***, Allows duplicates
    - It is usually created using paranthesis enclosing the items, but can also be created with comma-separated items as well
    - tuple objects can be reassinged but not changeable

      Reassingment example:
          t = ('a', 'b', 'a')
          t = t + (1,)

    Question:
        How would you create a tuple with single element?
        Is it possible to create a tuple using string or a list?

    Other commonly used methods

        - count(item) - Since it allows duplicates
        - index(item)


    Questions:
        1. What are the difference between a list and a tuple

            - Key difference is lists are mutable (changeable) but tuples are immutable (unchangeable)
            - Cannot replace or modify or delete an element in tuple but you can in a list
            - Cannot add an element to tuple but we can add element to list.
            - Cannot sort a tuple but in a list we can sort by calling "list.sort()" method.
            - Cannot remove an element in tuple but in list we can remove element


              fruits = ["apples", "bananas", "oranges"]
              "apples" can be changed to "berries" in fruits list


            - Similarities
                Tuples are stored in a single block of memory. Tuples are immutable so, It doesn't require extraspace to store new objects.
                Lists are allocated in two blocks: the fixed one with all the Python object information and a variable sized block for the data.
                It is the reason creating a tuple is faster than List.
                It also explains the slight difference in indexing speed is faster than lists, because in tuples for indexing it follows fewer pointers.

            - Advantages of using tuples:
                They use less memory where lists use more memory
            - can use tuples in a dictionary as a key but it's not possible with lists
            - can access element with an index in both tuples and lists


        2. t = ([1, 2, 3], "hello", 400)

           Is it possible to modify the list inside the tuple?
